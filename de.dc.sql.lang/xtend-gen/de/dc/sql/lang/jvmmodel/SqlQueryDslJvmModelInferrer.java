/**
 * generated by Xtext 2.19.0
 */
package de.dc.sql.lang.jvmmodel;

import com.google.inject.Inject;
import de.dc.sql.model.Application;
import de.dc.sql.model.Parameter;
import de.dc.sql.model.Query;
import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtend2.lib.StringConcatenationClient;
import org.eclipse.xtext.common.types.JvmDeclaredType;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.Functions.Function2;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

/**
 * <p>Infers a JVM model from the source model.</p>
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
 */
@SuppressWarnings("all")
public class SqlQueryDslJvmModelInferrer extends AbstractModelInferrer {
  /**
   * convenience API to build and initialize JVM types and their members.
   */
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  /**
   * The dispatch method {@code infer} is called for each instance of the
   * given element's type that is contained in a resource.
   * 
   * @param element
   *            the model to create one or more
   *            {@link JvmDeclaredType declared
   *            types} from.
   * @param acceptor
   *            each created
   *            {@link JvmDeclaredType type}
   *            without a container should be passed to the acceptor in order
   *            get attached to the current resource. The acceptor's
   *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
   *            accept(..)} method takes the constructed empty type for the
   *            pre-indexing phase. This one is further initialized in the
   *            indexing phase using the lambda you pass as the last argument.
   * @param isPreIndexingPhase
   *            whether the method is called in a pre-indexing phase, i.e.
   *            when the global index is not yet fully updated. You must not
   *            rely on linking using the index if isPreIndexingPhase is
   *            <code>true</code>.
   */
  protected void _infer(final Application element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      EList<Query> _queries = element.getQueries();
      for (final Query query : _queries) {
        EList<JvmMember> _members = it.getMembers();
        final Procedure1<JvmOperation> _function_1 = (JvmOperation it_1) -> {
          it_1.setStatic(true);
          final Consumer<Parameter> _function_2 = (Parameter e) -> {
            EList<JvmFormalParameter> _parameters = it_1.getParameters();
            JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, e.getName(), e.getType());
            this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
          };
          query.getParameters().forEach(_function_2);
          StringConcatenationClient _client = new StringConcatenationClient() {
            @Override
            protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
              _builder.append("return String.join(\"\\n\", new String[] {");
              _builder.newLine();
              _builder.append(" \t\t\t\t\t\t");
              String _content = SqlQueryDslJvmModelInferrer.this.getContent(query);
              _builder.append(_content, " \t\t\t\t\t\t");
              _builder.newLineIfNotEmpty();
              _builder.append(" \t\t\t\t\t\t");
              _builder.append("});");
            }
          };
          this._jvmTypesBuilder.setBody(it_1, _client);
        };
        JvmOperation _method = this._jvmTypesBuilder.toMethod(element, query.getName(), this._typeReferenceBuilder.typeRef(String.class), _function_1);
        this._jvmTypesBuilder.<JvmOperation>operator_add(_members, _method);
      }
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(element, "QueryManager"), _function);
  }
  
  public String getContent(final Query query) {
    String _xblockexpression = null;
    {
      String statement = query.getStatement();
      EList<Parameter> _parameters = query.getParameters();
      for (final Parameter p : _parameters) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("%");
        String _name = p.getName();
        _builder.append(_name);
        _builder.append("%");
        statement = statement.replace(_builder, "test");
      }
      int _length = statement.length();
      int _minus = (_length - 1);
      final Function1<String, String> _function = (String it) -> {
        return (("\"" + it) + "\"");
      };
      final Function2<String, String, String> _function_1 = (String p1, String p2) -> {
        return ((p1 + ",") + p2);
      };
      _xblockexpression = IterableExtensions.<String>reduce(ListExtensions.<String, String>map(((List<String>)Conversions.doWrapArray(statement.substring(1, _minus).split("\n\r"))), _function), _function_1);
    }
    return _xblockexpression;
  }
  
  public void infer(final EObject element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (element instanceof Application) {
      _infer((Application)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element != null) {
      _infer(element, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(element, acceptor, isPreIndexingPhase).toString());
    }
  }
}
