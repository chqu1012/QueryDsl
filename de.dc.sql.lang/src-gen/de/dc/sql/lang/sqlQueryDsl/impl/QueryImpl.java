/**
 * generated by Xtext 2.19.0
 */
package de.dc.sql.lang.sqlQueryDsl.impl;

import de.dc.sql.lang.sqlQueryDsl.Query;
import de.dc.sql.lang.sqlQueryDsl.SqlQueryDslPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.xtext.common.types.JvmFormalParameter;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Query</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.dc.sql.lang.sqlQueryDsl.impl.QueryImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.dc.sql.lang.sqlQueryDsl.impl.QueryImpl#getParameters <em>Parameters</em>}</li>
 *   <li>{@link de.dc.sql.lang.sqlQueryDsl.impl.QueryImpl#getStatement <em>Statement</em>}</li>
 *   <li>{@link de.dc.sql.lang.sqlQueryDsl.impl.QueryImpl#isStatementFromFile <em>Statement From File</em>}</li>
 *   <li>{@link de.dc.sql.lang.sqlQueryDsl.impl.QueryImpl#getFilePath <em>File Path</em>}</li>
 * </ul>
 *
 * @generated
 */
public class QueryImpl extends MinimalEObjectImpl.Container implements Query
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getParameters() <em>Parameters</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameters()
   * @generated
   * @ordered
   */
  protected EList<JvmFormalParameter> parameters;

  /**
   * The default value of the '{@link #getStatement() <em>Statement</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatement()
   * @generated
   * @ordered
   */
  protected static final String STATEMENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getStatement() <em>Statement</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatement()
   * @generated
   * @ordered
   */
  protected String statement = STATEMENT_EDEFAULT;

  /**
   * The default value of the '{@link #isStatementFromFile() <em>Statement From File</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStatementFromFile()
   * @generated
   * @ordered
   */
  protected static final boolean STATEMENT_FROM_FILE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isStatementFromFile() <em>Statement From File</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStatementFromFile()
   * @generated
   * @ordered
   */
  protected boolean statementFromFile = STATEMENT_FROM_FILE_EDEFAULT;

  /**
   * The default value of the '{@link #getFilePath() <em>File Path</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFilePath()
   * @generated
   * @ordered
   */
  protected static final String FILE_PATH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFilePath() <em>File Path</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFilePath()
   * @generated
   * @ordered
   */
  protected String filePath = FILE_PATH_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QueryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SqlQueryDslPackage.Literals.QUERY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SqlQueryDslPackage.QUERY__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<JvmFormalParameter> getParameters()
  {
    if (parameters == null)
    {
      parameters = new EObjectContainmentEList<JvmFormalParameter>(JvmFormalParameter.class, this, SqlQueryDslPackage.QUERY__PARAMETERS);
    }
    return parameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getStatement()
  {
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStatement(String newStatement)
  {
    String oldStatement = statement;
    statement = newStatement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SqlQueryDslPackage.QUERY__STATEMENT, oldStatement, statement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isStatementFromFile()
  {
    return statementFromFile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStatementFromFile(boolean newStatementFromFile)
  {
    boolean oldStatementFromFile = statementFromFile;
    statementFromFile = newStatementFromFile;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SqlQueryDslPackage.QUERY__STATEMENT_FROM_FILE, oldStatementFromFile, statementFromFile));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFilePath()
  {
    return filePath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFilePath(String newFilePath)
  {
    String oldFilePath = filePath;
    filePath = newFilePath;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SqlQueryDslPackage.QUERY__FILE_PATH, oldFilePath, filePath));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SqlQueryDslPackage.QUERY__PARAMETERS:
        return ((InternalEList<?>)getParameters()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SqlQueryDslPackage.QUERY__NAME:
        return getName();
      case SqlQueryDslPackage.QUERY__PARAMETERS:
        return getParameters();
      case SqlQueryDslPackage.QUERY__STATEMENT:
        return getStatement();
      case SqlQueryDslPackage.QUERY__STATEMENT_FROM_FILE:
        return isStatementFromFile();
      case SqlQueryDslPackage.QUERY__FILE_PATH:
        return getFilePath();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SqlQueryDslPackage.QUERY__NAME:
        setName((String)newValue);
        return;
      case SqlQueryDslPackage.QUERY__PARAMETERS:
        getParameters().clear();
        getParameters().addAll((Collection<? extends JvmFormalParameter>)newValue);
        return;
      case SqlQueryDslPackage.QUERY__STATEMENT:
        setStatement((String)newValue);
        return;
      case SqlQueryDslPackage.QUERY__STATEMENT_FROM_FILE:
        setStatementFromFile((Boolean)newValue);
        return;
      case SqlQueryDslPackage.QUERY__FILE_PATH:
        setFilePath((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SqlQueryDslPackage.QUERY__NAME:
        setName(NAME_EDEFAULT);
        return;
      case SqlQueryDslPackage.QUERY__PARAMETERS:
        getParameters().clear();
        return;
      case SqlQueryDslPackage.QUERY__STATEMENT:
        setStatement(STATEMENT_EDEFAULT);
        return;
      case SqlQueryDslPackage.QUERY__STATEMENT_FROM_FILE:
        setStatementFromFile(STATEMENT_FROM_FILE_EDEFAULT);
        return;
      case SqlQueryDslPackage.QUERY__FILE_PATH:
        setFilePath(FILE_PATH_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SqlQueryDslPackage.QUERY__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case SqlQueryDslPackage.QUERY__PARAMETERS:
        return parameters != null && !parameters.isEmpty();
      case SqlQueryDslPackage.QUERY__STATEMENT:
        return STATEMENT_EDEFAULT == null ? statement != null : !STATEMENT_EDEFAULT.equals(statement);
      case SqlQueryDslPackage.QUERY__STATEMENT_FROM_FILE:
        return statementFromFile != STATEMENT_FROM_FILE_EDEFAULT;
      case SqlQueryDslPackage.QUERY__FILE_PATH:
        return FILE_PATH_EDEFAULT == null ? filePath != null : !FILE_PATH_EDEFAULT.equals(filePath);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", statement: ");
    result.append(statement);
    result.append(", statementFromFile: ");
    result.append(statementFromFile);
    result.append(", filePath: ");
    result.append(filePath);
    result.append(')');
    return result.toString();
  }

} //QueryImpl
