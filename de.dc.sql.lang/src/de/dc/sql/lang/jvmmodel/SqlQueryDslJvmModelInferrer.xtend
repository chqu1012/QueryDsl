/*
 * generated by Xtext 2.19.0
 */
package de.dc.sql.lang.jvmmodel

import com.google.inject.Inject
import de.dc.sql.lang.sqlQueryDsl.Model
import java.util.Scanner
import org.eclipse.xtext.common.types.JvmVisibility
import org.eclipse.xtext.common.types.TypesFactory
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder

class SqlQueryDslJvmModelInferrer extends AbstractModelInferrer {

	@Inject TypesFactory typesFactory

	@Inject extension JvmTypesBuilder

	def dispatch void infer(Model element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		acceptor.accept(element.toClass(element.package + '.' + element.name)) [
			for (query : element.queries) {
				val jvmOperation = typesFactory.createJvmOperation
				jvmOperation.simpleName = query.name
				jvmOperation.returnType = String.typeRef
				jvmOperation.static = true
				jvmOperation.visibility = JvmVisibility.PUBLIC
				query.parameters.toList.forEach [ e |
					jvmOperation.parameters += e.toParameter(e.name, e.parameterType)
				]
				jvmOperation.body = '''
					«query.statement.content»
					String content = sb.toString();
					«FOR p : query.parameters»
					content = content.replaceAll("<«p.name»>", String.valueOf(«p.name»));
					«ENDFOR»
					return content.trim();
				'''
				members += jvmOperation
			}
		]
	}

	def String content(String source) {
		val Scanner scanner = new Scanner(source);
		var String line = null;
		val StringBuilder stringBuilder = new StringBuilder();
		val String ls = System.getProperty("line.separator");

		stringBuilder.append("StringBuilder sb = new StringBuilder();" + ls);
		while (scanner.hasNextLine()) {
			line = scanner.nextLine.trim
			stringBuilder.append("sb.append(\"" + line+" "+ "\");" + ls);
		}
		scanner.close

		var String content = stringBuilder.toString();
		content = content.replaceAll("```", "");
		content;
	}
}